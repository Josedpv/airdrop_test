/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface OptionalOnlyCallerInterface extends utils.Interface {
  functions: {
    "getDomainSeparator()": FunctionFragment;
    "getNextNonce(address)": FunctionFragment;
    "isOnlyCallerEnabled(address)": FunctionFragment;
    "setOnlyCallerCheck(bool)": FunctionFragment;
    "setOnlyCallerCheckWithSignature(address,bool,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getDomainSeparator"
      | "getNextNonce"
      | "isOnlyCallerEnabled"
      | "setOnlyCallerCheck"
      | "setOnlyCallerCheckWithSignature"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOnlyCallerEnabled",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOnlyCallerCheck",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOnlyCallerCheckWithSignature",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOnlyCallerEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOnlyCallerCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOnlyCallerCheckWithSignature",
    data: BytesLike
  ): Result;

  events: {
    "OnlyCallerOptIn(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OnlyCallerOptIn"): EventFragment;
}

export interface OnlyCallerOptInEventObject {
  user: string;
  enabled: boolean;
}
export type OnlyCallerOptInEvent = TypedEvent<
  [string, boolean],
  OnlyCallerOptInEventObject
>;

export type OnlyCallerOptInEventFilter = TypedEventFilter<OnlyCallerOptInEvent>;

export interface OptionalOnlyCaller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptionalOnlyCallerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getDomainSeparator(overrides?: CallOverrides): Promise<[string]>;

    getNextNonce(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isOnlyCallerEnabled(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setOnlyCallerCheck(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOnlyCallerCheckWithSignature(
      user: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getDomainSeparator(overrides?: CallOverrides): Promise<string>;

  getNextNonce(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isOnlyCallerEnabled(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setOnlyCallerCheck(
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOnlyCallerCheckWithSignature(
    user: PromiseOrValue<string>,
    enabled: PromiseOrValue<boolean>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getDomainSeparator(overrides?: CallOverrides): Promise<string>;

    getNextNonce(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOnlyCallerEnabled(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setOnlyCallerCheck(
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOnlyCallerCheckWithSignature(
      user: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OnlyCallerOptIn(address,bool)"(
      user?: null,
      enabled?: null
    ): OnlyCallerOptInEventFilter;
    OnlyCallerOptIn(user?: null, enabled?: null): OnlyCallerOptInEventFilter;
  };

  estimateGas: {
    getDomainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    getNextNonce(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOnlyCallerEnabled(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOnlyCallerCheck(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOnlyCallerCheckWithSignature(
      user: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getDomainSeparator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextNonce(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOnlyCallerEnabled(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOnlyCallerCheck(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOnlyCallerCheckWithSignature(
      user: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
